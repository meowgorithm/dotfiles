#!/bin/bash
set -euo pipefail

source "$PWD/bash/bash_funcs"

BLACK=0
GREEN=2
YELLOW=3
BLUE=4
WHITE=7

status() {
    local text="$1"
    local bg_color="$2"
    local fg_color="$3"

    # Convert color numbers to ANSI codes
    local bg_code=$((bg_color < 8 ? bg_color + 40 : bg_color + 92))
    local fg_code=$((fg_color < 8 ? fg_color + 30 : fg_color + 82))

    local padding
    padding=6
    printf "\x1b[1;${bg_code};${fg_code}m %-${padding}s \x1b[m" "$text"
}

SKIP="$(status "SKIP" "$BLUE" "$WHITE")"
LINKED="$(status "LINKED" "$GREEN" "$BLACK")"
BACKUP="$(status "BACKUP" "$YELLOW" "$BLACK")"
UNLINKED="$(status "UNLINK" "$GREEN" "$BLACK")"

link() {
    local op="$1"
    local source="$PWD/$2"
    local target="$3"

    if [[ $op == "remove" ]]; then
        # Remove symlink.

        if [ -L "$target" ]; then
            rm "$target"
            echo "$UNLINKED $target"
        else
            echo "$SKIP No symlink to unlink at $target"
        fi

    else
        # Create symlink.

        mkdir -p "$(dirname "$target")"
        if [ -L "$target" ] && [ "$(readlink "$target")" = "$source" ]; then
            # Link already exists.
            echo "$SKIP Link $target -> $source exists"
        elif [ -L "$target" ]; then
            # Wrong symlink exists, just replace it.
            ln -sf "$source" "$target"
            echo "$LINKED $1 -> $target (replaced wrong symlink)"
        elif [ -e "$target" ]; then
            # There's a real file/directory there. Back it up, then link.
            mv "$target" "$target.backup.$(date +%s)"
            ln -sf "$source" "$target"
            echo "$BACKUP Linked $source to $target (backed up existing)"
        else
            # Nothing there, create link.
            ln -sf "$source" "$target"
            echo "$LINKED $1 -> $target"
        fi

    fi
}

unlink() {
    local target="$1"
}

OP="$1"
if [[ "$OP" != "remove" ]]; then
    OP="link"
fi

os="$(which_os)"

if [ "$OP" != "remove" ]; then
    case "$os" in
    darwin)
        brew bundle -v
        ;;
    void)
        grep -vE '^\s*#|^\s*$' Xbpsfile | xargs sudo xbps-install -y
        ;;
    esac
fi

printf '\n'

# Git
link "$OP" "git/config" "$HOME/.config/git/config"
link "$OP" "git/ignore" "$HOME/.config/git/ignore"

# Bash
link "$OP" "bash/bashrc" "$HOME/.bashrc"
link "$OP" "bash/bash_profile" "$HOME/.bash_profile"
link "$OP" "bash/bash_funcs" "$HOME/.local/share/meowgorithm/bash_funcs"
link "$OP" "bash/rc.gpg" "$HOME/.local/share/meowgorithm/rc.gpg"

# Tmux
link "$OP" "tmux.conf" "$HOME/.tmux.conf"

# Vim
link "$OP" "vim/vimrc" "$HOME/.config/vim/vimrc"
link "$OP" "vim/charmtone.vim" "$HOME/.config/vim/colors/charmtone.vim"

# Kitty
link "$OP" "kitty/kitty.conf" "$HOME/.config/kitty/kitty.conf"
if [ "$os" = "darwin" ]; then
    link "$OP" "kitty/darwin.conf" "$HOME/.config/kitty/os.conf"
else
    link "$OP" "kitty/linux.conf" "$HOME/.config/kitty/os.conf"
fi

# Rio
link "$OP" "rio/config.toml" "$HOME/.config/rio/config.toml"

# Ghostty
link "$OP" "ghostty/config" "$HOME/.config/ghostty/config"
if [ "$os" = "darwin" ]; then
    link "$OP" "ghostty/darwin" "$HOME/.config/ghostty/os"
else
    link "$OP" "ghostty/linux" "$HOME/.config/ghostty/os"
fi

# Fourmolu
link "$OP" "fourmolu.yaml" "$HOME/.config/fourmolu.yaml"

if [[ "$OP" == "remove" ]]; then
    exit 0
fi

# Bash setup
if ! grep -q "$(which bash)" /etc/shells; then
    echo "Adding $(which bash) to /etc/shells; will ask sudo password."
    which bash | sudo tee -a /etc/shells
    chsh -s "$(which bash)"
fi
